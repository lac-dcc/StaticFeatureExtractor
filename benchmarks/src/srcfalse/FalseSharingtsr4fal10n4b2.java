/*********************************************
The main Program generated using JavaEigenbench v0.1 
bench at 2019-03-11 17:52:37.936033
The for construct iteration size is2048
with percentage of false sharing as 204.8
realized without any loop inside for construct
The body of the run() method within the ParallelFor class is
splitted into multiple methods due to 'code too large exception'
*********************************************/

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class FalseSharingtsr4fal10n4b2 {
   private static int NSIZE = 16384;
   private static int NTHREADS = 4;

   public static void main (String[] args) {
       Float[] arrf = new Float[NSIZE];
       Float op1 = 0.0f;
       Integer index = 0;

       for(int i = 0; i < NSIZE; i++){
           arrf[i] = 1.0f * i;
       }

       ExecutorService executor = Executors.newFixedThreadPool(NTHREADS);

       System.err.println("Begin benchmark\n");
       System.err.println("With FALSE SHARING percentage 204.8");
       System.err.println("Total Instructions is 16384000\n");

       double time;
       long start = System.nanoTime();
       for (int i = 0; i < NTHREADS; i++) {
          ParallelForFalseShtsr4fal10n4b2 p = new ParallelForFalseShtsr4fal10n4b2(2000, arrf, op1, index);
          executor.submit(p);
       }
       executor.shutdown();

       try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
       } catch (InterruptedException e) {
             e.printStackTrace();
       }

       time = (System.nanoTime() - start) / 1e6;
       System.out.printf("%.3f", time);
       System.err.printf("\nEnd benchmark %f %f\n", arrf[11], arrf[9]);
   }
}


class ParallelForFalseShtsr4fal10n4b2 implements Runnable { 
    int NSIZE = 16384;
    int iterationsPerThread; 
    int tid, B, A, pos, k; 
    Integer index;
    Float ops1, ops2;
    Float[] arrf;
 
    ParallelForFalseShtsr4fal10n4b2 (int it, Float[] ar, Float o1, Integer idx) { 
        iterationsPerThread = it; 
        tid = (int) Thread.currentThread().getId(); 
        arrf = ar; 
        A = 80; 
        B = tid * 10; 
        ops1 = o1; 
        ops2 = 1.0f; 
        pos = tid * 8; 
        index = idx; 
    } 
 
    public void run() { 
        for (int i = 0; i < iterationsPerThread; i++) { 
           aux0();
        }
    }

    private void aux0() {
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        index++;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        index++;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        index++;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        index++;
        index++;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        index++;
        arrf[A * index + B]= ops1;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        index++;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        index++;
        index++;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        index++;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 / 2;
        index++;
        index++;
        index++;
        index++;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        index++;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        index++;
        index++;
        ops1 = ops1 * ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 - ops2;
        index++;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        index++;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        ops1 = ops1 + ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 / 2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        index++;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 + ops2;
        index++;
        index++;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        ops1 = ops1 + ops2;
        ops1 = ops1 * ops2;
        ops1 = ops1 - ops2;
        arrf[A * index + B]= ops1;
        arrf[A * index + B]= ops1;
        ops1 = ops1 - ops2;
        index++;
        ops1 = ops1 * ops2;

       if((index+ 512) * A  > NSIZE) index = 0;
    }
}
